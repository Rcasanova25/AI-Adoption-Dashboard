"""ROI Analysis view module for AI Adoption Dashboard.\n\nThis module provides comprehensive ROI analysis visualizations including\ninvestment returns, payback analysis, sector-specific ROI, and an\ninteractive ROI calculator.\n"""\n\nfrom datetime import datetime\nfrom typing import Any, Dict\n\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport streamlit as st\n\nfrom business.roi_analysis import compute_roi\nfrom components.accessibility import AccessibilityManager\nfrom views.base import BaseView\n\n\nclass ROIAnalysisView(BaseView):\n    def __init__(self):\n        super().__init__(\n            title=\"ROI Analysis: Comprehensive Economic Impact\",\n            description=\"Comprehensive ROI analysis visualizations including investment returns, payback analysis, sector-specific ROI, and an interactive ROI calculator.\"\n        )\n        self.a11y = AccessibilityManager()\n\n    def render_content(self, data: Dict[str, Any]) -> None:\n        \"""Render the ROI Analysis view content.\n\n        Args:\n            data: Dictionary containing required data:\n                - sector_2025: Sector data including ROI metrics\n        """\n        try:\n            # Get required data\n            sector_2025 = data.get(\"sector_2025\")\n            if sector_2025 is None or sector_2025.empty:\n                st.error(\n                    \"Required sector data for ROI analysis is missing or empty. Please check data sources.\"\n                )\n                st.stop()\n\n            st.write(\"💰 **ROI Analysis: Comprehensive Economic Impact**\")\n\n            # Create detailed ROI dashboard\n            tab1, tab2, tab3, tab4 = st.tabs(\n                [\"Investment Returns\", \"Payback Analysis\", \"Sector ROI\", \"ROI Calculator\"]\n            )\n\n            with tab1:\n                self._render_investment_returns()\n\n            with tab2:\n                self._render_payback_analysis()\n\n            with tab3:\n                self._render_sector_roi(sector_2025)\n\n            with tab4:\n                self._render_roi_calculator()\n\n        except Exception as e:\n            st.error(f\"Error rendering ROI analysis view: {str(e)}\")\n\n    def _render_investment_returns(self) -> None:\n        \"""Render the investment returns tab.\"""\n        roi_data = pd.DataFrame(\n            {\n                \"investment_level\": [\n                    \"Pilot (<$100K)\",\n                    \"Small ($100K-$500K)\",\n                    \"Medium ($500K-$2M)\",\n                    \"Large ($2M-$10M)\",\n                    \"Enterprise ($10M+)\",\n                ],\n                \"avg_roi\": [1.8, 2.5, 3.2, 3.8, 4.5],\n                \"time_to_roi\": [6, 9, 12, 18, 24],  # months\n                \"success_rate\": [45, 58, 72, 81, 87],  # % of projects achieving positive ROI\n            }\n        )\n\n        fig = go.Figure()\n\n        # ROI bars\n        fig.add_trace(\n            go.Bar(\n                name=\"Average ROI\",\n                x=roi_data[\"investment_level\"],\n                y=roi_data[\"avg_roi\"],\n                yaxis=\"y\",\n                marker_color=\"#2ECC71\",\n                text=[f\"{x}x\" for x in roi_data[\"avg_roi\"]],\n                textposition=\"outside\",\n            )\n        )\n\n        # Success rate line\n        fig.add_trace(\n            go.Scatter(\n                name=\"Success Rate\",\n                x=roi_data[\"investment_level\"],\n                y=roi_data[\"success_rate\"],\n                yaxis=\"y2\",\n                mode=\"lines+markers\",\n                line=dict(width=3, color=\"#3498DB\"),\n                marker=dict(size=10),\n            )\n        )\n\n        fig.update_layout(\n            title=\"AI ROI by Investment Level\",\n            xaxis_title=\"Investment Level\",\n            yaxis=dict(title=\"Average ROI (x)\", side=\"left\"),\n            yaxis2=dict(title=\"Success Rate (%)\", side=\"right\", overlaying=\"y\"),\n            height=400,\n            hovermode=\"x unified\",\n        )\n\n        fig = self.a11y.make_chart_accessible(\n            fig,\n            title=\"AI ROI by Investment Level\",\n            description=\"A dual-axis chart showing the relationship between AI investment levels and returns. Green bars display average ROI multipliers on the left y-axis: Small investments (<$100K) yield 1.8x ROI, Medium ($100K-$500K) achieve 2.5x, Large ($500K-$2M) reach 3.2x, Enterprise ($2M-$10M) deliver 3.8x, and Enterprise ($10M+) deliver 4.5x returns. A blue line shows success rates on the right y-axis, increasing from 45% for small investments to 87% for enterprise-level investments. The chart demonstrates that larger AI investments correlate with both higher returns and greater success rates.\",\n        )\n        st.plotly_chart(fig, use_container_width=True)\n\n        st.info(\n            \"""\n        **Key Insights:**\n        - Larger investments show higher ROI and success rates\n        - Enterprise projects (87% success) benefit from better resources and planning\n        - Even small pilots can achieve 1.8x ROI with 45% success rate\n        """\n        )\n\n    def _render_payback_analysis(self) -> None:\n        \"""Render the payback analysis tab.\"""\n        payback_data = pd.DataFrame(\n            {\n                \"scenario\": [\"Best Case\", \"Typical\", \"Conservative\"],\n                \"months\": [8, 15, 24],\n                \"probability\": [20, 60, 20],\n            }\n        )\n\n        fig = go.Figure()\n\n        # Create funnel chart for payback scenarios\n        fig.add_trace(\n            go.Funnel(\n                y=payback_data[\"scenario\"],\n                x=payback_data[\"months\"],\n                textinfo=\"text+percent initial\",\n                text=[f\"{x} months\" for x in payback_data[\"months\"]],\n                marker=dict(color=[\"#2ECC71\", \"#F39C12\", \"#E74C3C\"]),\n            )\n        )\n\n        fig.update_layout(\n            title=\"AI Investment Payback Period Distribution\",\n            xaxis_title=\"Months to Payback\",\n            height=350,\n        )\n\n        fig = self.a11y.make_chart_accessible(\n            fig,\n            title=\"AI Investment Payback Period Distribution\",\n            description=\"A funnel chart showing the distribution of AI investment payback periods across three scenarios. Best Case scenario (green, 20% probability) achieves payback in 8 months. Typical scenario (orange, 60% probability) reaches payback in 15 months. Conservative scenario (red, 20% probability) requires 24 months for payback. The visualization shows that most AI investments (60%) achieve payback within 15 months, with only 20% taking longer than 2 years.\",\n        )\n        st.plotly_chart(fig, use_container_width=True)\n\n        # Time to value breakdown\n        st.subheader(\"⏱️ Time to Value by AI Capability\")\n\n        time_to_value = pd.DataFrame(\n            {\n                \"capability\": [\n                    \"Process Automation\",\n                    \"Predictive Analytics\",\n                    \"Natural Language Processing\",\n                    \"Computer Vision\",\n                    \"Recommendation Systems\",\n                    \"GenAI Applications\",\n                ],\n                \"months_to_value\": [3, 6, 9, 12, 6, 4],\n                \"complexity\": [2, 3, 4, 5, 3, 2],  # 1-5 scale\n            }\n        )\n\n        fig2 = px.bar(\n            time_to_value,\n            x=\"capability\",\n            y=\"months_to_value\",\n            color=\"complexity\",\n            color_continuous_scale=\"RdYlGn_r\",\n            title=\"Time to Value by AI Capability\",\n            labels={\"months_to_value\": \"Months to Value\", \"complexity\": \"Implementation Complexity\"},\n        )\n\n        fig2.update_traces(texttemplate=\"%{y} months\", textposition=\"outside\")\n        fig2.update_layout(xaxis_tickangle=45, height=400)\n\n        fig2 = self.a11y.make_chart_accessible(\n            fig2,\n            title=\"Time to Value by AI Capability\",\n            description=\"A bar chart showing time to value for different AI capabilities, colored by implementation complexity (1-5 scale, red=high, green=low). Process Automation delivers value in 3 months with low complexity (2). GenAI Applications show quick returns at 4 months with low complexity (2). Predictive Analytics and Recommendation Systems both achieve value in 6 months with medium complexity (3). Natural Language Processing requires 9 months with high complexity (4). Computer Vision has the longest time to value at 12 months with the highest complexity (5).\",\n        )\n        st.plotly_chart(fig2, use_container_width=True)\n\n    def _render_sector_roi(self, sector_2025: pd.DataFrame) -> None:\n        \"""Render the sector ROI tab.\"""\n        fig = go.Figure()\n\n        # Create bubble chart\n        fig.add_trace(\n            go.Scatter(\n                x=sector_2025[\"adoption_rate\"],\n                y=sector_2025[\"avg_roi\"],\n                mode=\"markers+text\",\n                marker=dict(\n                    size=sector_2025[\"genai_adoption\"],\n                    color=sector_2025[\"avg_roi\"],\n                    colorscale=\"Viridis\",\n                    showscale=True,\n                    colorbar=dict(title=\"ROI (x)\"),\n                ),\n                text=sector_2025[\"sector\"],\n                textposition=\"top center\",\n                hovertemplate=\"<b>%{text}</b><br>Adoption: %{x}%<br>ROI: %{y}x<br>GenAI Adoption: %{marker.size}%<extra></extra>\",\n            )\n        )\n\n        # Add trend line\n        z = np.polyfit(sector_2025[\"adoption_rate\"], sector_2025[\"avg_roi\"], 1)\n        p = np.poly1d(z)\n        x_trend = np.linspace(\n            sector_2025[\"adoption_rate\"].min(), sector_2025[\"adoption_rate\"].max(), 100\n        )\n\n        fig.add_trace(\n            go.Scatter(\n                x=x_trend,\n                y=p(x_trend),\n                mode=\"lines\",\n                line=dict(color=\"red\", dash=\"dash\"),\n                name=\"Trend\",\n                showlegend=True,\n            )\n        )\n\n        fig.update_layout(\n            title=\"Sector AI Adoption vs ROI (Bubble Size = GenAI Adoption)\",\n            xaxis_title=\"Overall AI Adoption Rate (%)\",\n            yaxis_title=\"Average ROI (x)\",\n            height=500,\n        )\n\n        fig = self.a11y.make_chart_accessible(\n            fig,\n            title=\"Sector AI Adoption vs ROI\",\n            description=\"A bubble chart plotting AI adoption rates (x-axis) against average ROI (y-axis) across sectors, with bubble sizes representing GenAI adoption rates. Technology sector leads with 92% adoption and 4.2x ROI. Financial Services follows with 85% adoption and 3.8x ROI. Healthcare shows 78% adoption with 3.2x ROI. Manufacturing has 75% adoption and 3.5x ROI. Retail & E-commerce displays 72% adoption with 3.0x ROI. Education shows 65% adoption and 2.5x ROI. Energy & Utilities has 58% adoption with 2.8x ROI. Government trails with 52% adoption and 2.2x ROI. A red dashed trend line shows positive correlation between adoption and ROI.\",\n        )\n        st.plotly_chart(fig, use_container_width=True)\n\n        # ROI components breakdown\n        st.subheader(\"💡 ROI Components by Sector\")\n\n        roi_components = pd.DataFrame(\n            {\n                \"component\": [\n                    \"Cost Reduction\",\n                    \"Revenue Growth\",\n                    \"Productivity Gains\",\n                    \"Quality Improvement\",\n                ],\n                \"Technology\": [25, 40, 20, 15],\n                \"Financial Services\": [30, 35, 25, 10],\n                \"Healthcare\": [20, 25, 30, 25],\n                \"Manufacturing\": [35, 20, 25, 20],\n            }\n        )\n\n        fig2 = go.Figure()\n\n        for sector in [\"Technology\", \"Financial Services\", \"Healthcare\", \"Manufacturing\"]:\n            fig2.add_trace(\n                go.Bar(\n                    name=sector,\n                    x=roi_components[\"component\"],\n                    y=roi_components[sector],\n                    text=[f\"{x}%\" for x in roi_components[sector]],\n                    textposition=\"outside\",\n                )\n            )\n\n        fig2.update_layout(\n            title=\"ROI Component Contribution by Sector\",\n            xaxis_title=\"ROI Component\",\n            yaxis_title=\"Contribution to Total ROI (%)\",\n            barmode=\"group\",\n            height=400,\n        )\n\n        st.plotly_chart(fig2, use_container_width=True)\n\n    def _render_roi_calculator(self) -> None:\n        \"""Render the ROI calculator tab.\"""\n        st.subheader(\"ROI Calculator\")\n        with st.form(\"roi_form\"):\n            initial_investment = st.number_input(\n                \"Initial Investment ($)\", min_value=0.0, value=100000.0\n            )\n            annual_savings = st.number_input(\"Annual Savings ($)\", min_value=0.0, value=25000.0)\n            payback_period_months = st.number_input(\"Payback Period (months)\", min_value=1, value=12)\n            risk_level = st.selectbox(\"Risk Level\", [\"Low\", \"Medium\", \"High\", \"Very High\"], index=1)\n            productivity_gain_percent = st.number_input(\n                \"Productivity Gain (%)\", min_value=0.0, value=10.0\n            )\n            submitted = st.form_submit_button(\"Calculate ROI\")\n        if submitted:\n            roi_metrics = compute_roi(\n                initial_investment=initial_investment,\n                annual_savings=annual_savings,\n                payback_period_months=payback_period_months,\n                risk_level=risk_level,\n                productivity_gain_percent=productivity_gain_percent,\n            )\n            st.success(f\"Total ROI: {roi_metrics.total_roi_percent:.2f}%\")\n            st.info(\n                f\"Payback Period: {roi_metrics.payback_period_months} months\n\"\n                f\"Breakeven: {roi_metrics.breakeven_months} months\n\"\n                f\"Risk Level: {roi_metrics.risk_level}\n\"\n                f\"Productivity Gain: {roi_metrics.productivity_gain_percent}%\"\n            )\n\n\nroi_analysis_view = ROIAnalysisView()\n\ndef render(data: Dict[str, Any]) -> None:\n    roi_analysis_view.render(data)\n