# 🚀 **Streamlit to Plotly Dash Migration Plan**
## *LLM-Optimized Migration Guide for AI Adoption Dashboard*

This migration plan uses explicit, systematic instructions designed for LLM implementation.

---

## 📋 **Pre-Migration Checklist**

### **Step 1: Install Required Dependencies**
```bash
pip install dash
pip install dash-bootstrap-components
pip install dash-mantine-components
pip install plotly
pip install pandas
# Keep all existing dependencies from requirements.txt
```

### **Step 2: Create New Project Structure**
```
AI-Adoption-Dashboard-Dash/
├── app.py                     # Main Dash application
├── layouts/
│   ├── __init__.py
│   ├── main_layout.py         # Converts Streamlit layout
│   ├── sidebar_layout.py      # Converts Streamlit sidebar
│   └── view_layouts.py        # Individual view components
├── callbacks/
│   ├── __init__.py
│   ├── navigation_callbacks.py
│   ├── data_callbacks.py
│   └── visualization_callbacks.py
├── components/
│   ├── __init__.py
│   ├── charts.py              # Plotly chart functions
│   ├── metrics.py             # Metric cards
│   └── tables.py              # Data tables
├── business/                  # Keep existing
├── data/                      # Keep existing
├── Utils/                     # Keep existing
├── visualization/             # Keep existing
└── assets/
    └── custom.css             # Custom styling
```

---

## 🔄 **Phase 1: Core Application Structure (Week 1)**

### **Day 1-2: Main Application Setup**

#### **Create New app.py (Dash Version)**
```python
# app.py - Main Dash Application
import dash
from dash import Dash, html, dcc, Input, Output, State, callback
import dash_bootstrap_components as dbc
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Import existing business logic (unchanged)
from business.metrics import business_metrics, CompetitivePosition, InvestmentRecommendation
from business.roi_calculator import roi_calculator
from business.causal_analysis import causal_engine, CausalAnalysisResult, ProductivityMetric
from data.kedro_pipeline import kedro_manager, AIAdoptionKedroManager
from visualization.vizro_dashboard import vizro_dashboard, PersonaType

# Import existing data infrastructure (unchanged)
from data.loaders import load_all_datasets, validate_all_loaded_data
from data.models import safe_validate_data
from data.geographic import get_geographic_data, get_country_details, generate_geographic_insights

# Import new Dash layouts
from layouts.main_layout import create_main_layout
from layouts.sidebar_layout import create_sidebar_layout

# Initialize Dash app with Bootstrap theme
external_stylesheets = [dbc.themes.BOOTSTRAP]
app = Dash(__name__, external_stylesheets=external_stylesheets)
app.title = "AI Adoption Dashboard | 2018-2025 Analysis"

# Load data using existing function (unchanged)
@callback(
    Output('data-store', 'data'),
    Input('app-init', 'id')
)
def load_dashboard_data(init_trigger):
    """Load data using existing McKinsey-powered pipeline"""
    try:
        mckinsey_data = load_data_with_mckinsey_tools()  # Existing function
        return mckinsey_data
    except Exception as e:
        print(f"Error loading data: {e}")
        return load_fallback_data()  # Existing fallback function

# Create main app layout
app.layout = html.Div([
    # Hidden div to trigger data loading
    html.Div(id='app-init', style={'display': 'none'}),
    
    # Data storage component
    dcc.Store(id='data-store'),
    dcc.Store(id='session-store', data={
        'selected_persona': 'General',
        'data_year': '2025 (GenAI Era)',
        'view_type': 'Adoption Rates',
        'first_visit': True
    }),
    
    # Main layout
    create_main_layout()
])

if __name__ == '__main__':
    app.run_server(debug=True)
```

#### **Create layouts/main_layout.py**
```python
# layouts/main_layout.py - Convert Streamlit layout to Dash
import dash_bootstrap_components as dbc
from dash import html, dcc
from .sidebar_layout import create_sidebar_layout

def create_main_layout():
    """Create main dashboard layout - converts Streamlit structure to Dash"""
    
    layout = dbc.Container([
        # Header section (converts Streamlit title and description)
        dbc.Row([
            dbc.Col([
                html.H1("🤖 AI Adoption Dashboard: 2018-2025", className="mb-3"),
                html.P("Comprehensive analysis from early AI adoption (2018) to current GenAI trends (2025)", 
                       className="lead mb-4"),
                
                # What's New section (converts Streamlit expander)
                dbc.Accordion([
                    dbc.AccordionItem([
                        html.Div([
                            html.H5("Latest Updates (June 2025):"),
                            html.Ul([
                                html.Li("✅ Integrated AI Index Report 2025 findings"),
                                html.Li("✅ Added industry-specific 2025 data"),
                                html.Li("✅ Enhanced financial impact clarity"),
                                html.Li("✅ New skill gap and governance metrics"),
                                html.Li("✅ Interactive filtering for charts"),
                                html.Li("✅ Source attribution for all data points"),
                                html.Li("✅ Export data as CSV functionality"),
                                html.Li("✅ Comprehensive academic analysis integration"),
                                html.Li("✅ Enhanced risks and safety analysis")
                            ])
                        ])
                    ], title="🆕 What's New in Version 2.2.0")
                ], start_collapsed=True, className="mb-4"),
                
                # Important note (converts Streamlit info box)
                dbc.Alert([
                    html.Strong("📌 Important Note: "),
                    "Adoption rates in this dashboard reflect \"any AI use\" including pilots, experiments, and production deployments. ",
                    "Enterprise-wide production use rates are typically lower. Data sources include AI Index Report 2025, McKinsey Global Survey on AI, ",
                    "OECD AI Policy Observatory, and US Census Bureau AI Use Supplement."
                ], color="info", className="mb-4")
            ])
        ]),
        
        # Main content area
        dbc.Row([
            # Sidebar (converts Streamlit sidebar)
            dbc.Col([
                create_sidebar_layout()
            ], width=3, className="sidebar"),
            
            # Main content (converts Streamlit main area)
            dbc.Col([
                # Key metrics row (converts Streamlit columns)
                html.Div(id="key-metrics-row", className="mb-4"),
                
                # Main visualization area (converts Streamlit view content)
                html.Div(id="main-content-area")
            ], width=9)
        ])
    ], fluid=True)
    
    return layout

def create_key_metrics_cards(data_year, mckinsey_data):
    """Create key metrics cards - converts Streamlit metric columns"""
    
    if "2025" in data_year:
        metrics = [
            {"label": "Overall AI Adoption*", "value": "78%", "delta": "+23pp from 2023", 
             "help": "*Includes any AI use. Jumped from 55% in 2023 (AI Index 2025)"},
            {"label": "GenAI Adoption*", "value": "71%", "delta": "+38pp from 2023", 
             "help": "*More than doubled from 33% in 2023 (AI Index 2025)"},
            {"label": "2024 AI Investment", "value": "$252.3B", "delta": "+44.5% YoY", 
             "help": "Total corporate AI investment reached record levels"},
            {"label": "Cost Reduction", "value": "280x cheaper", "delta": "Since Nov 2022", 
             "help": "AI inference cost dropped from $20 to $0.07 per million tokens"}
        ]
    else:
        metrics = [
            {"label": "Overall AI Adoption", "value": "5.8%", "delta": "📊 Firm-weighted"},
            {"label": "Large Firms (5000+)", "value": "58.5%", "delta": "🏢 High adoption"},
            {"label": "AI + Cloud", "value": "45%", "delta": "☁️ Technology stack"},
            {"label": "Top City", "value": "SF Bay (9.5%)", "delta": "🌍 Geographic leader"}
        ]
    
    metric_cards = []
    for metric in metrics:
        card = dbc.Card([
            dbc.CardBody([
                html.H4(metric["value"], className="text-primary"),
                html.P(metric["label"], className="card-title"),
                html.Small(metric["delta"], className="text-muted")
            ])
        ], className="metric-card mb-3")
        metric_cards.append(dbc.Col(card, width=3))
    
    return dbc.Row(metric_cards)
```

#### **Create layouts/sidebar_layout.py**
```python
# layouts/sidebar_layout.py - Convert Streamlit sidebar to Dash
import dash_bootstrap_components as dbc
from dash import html, dcc

def create_sidebar_layout():
    """Create sidebar layout - converts Streamlit sidebar controls"""
    
    sidebar = html.Div([
        # Dashboard Controls header
        html.H4("📊 Dashboard Controls", className="sidebar-header"),
        
        # McKinsey Tools section
        html.Hr(),
        html.H5("🏢 McKinsey Tools"),
        
        # Causal Analysis status (converts Streamlit metrics)
        dbc.Card([
            dbc.CardBody([
                html.P("CausalNx Analysis", className="card-title"),
                html.H6("✅ Complete", className="text-success"),
                html.Small("Confidence: 85.2%", className="text-muted")
            ])
        ], className="mb-3"),
        
        # Kedro Pipeline status
        dbc.Card([
            dbc.CardBody([
                html.P("Kedro Pipeline", className="card-title"),
                html.H6("✅ Connected", className="text-success")
            ])
        ], className="mb-3"),
        
        # Vizro Dashboard launcher
        html.H6("🎯 Advanced Dashboards"),
        dbc.Button("🚀 Launch Vizro Executive Dashboard", 
                  id="launch-vizro-btn", 
                  color="primary", 
                  className="mb-3 w-100"),
        
        html.Hr(),
        
        # Persona selection (converts Streamlit selectbox)
        html.Label("Select Your Role:", className="form-label"),
        dcc.Dropdown(
            id='persona-selector',
            options=[
                {'label': 'General', 'value': 'General'},
                {'label': 'Business Leader', 'value': 'Business Leader'},
                {'label': 'Policymaker', 'value': 'Policymaker'},
                {'label': 'Researcher', 'value': 'Researcher'}
            ],
            value='General',
            className="mb-3"
        ),
        
        # Data year selection (converts Streamlit selectbox)
        html.Label("Select Data Year:", className="form-label"),
        dcc.Dropdown(
            id='data-year-selector',
            options=[
                {'label': '2018 (Early AI)', 'value': '2018 (Early AI)'},
                {'label': '2025 (GenAI Era)', 'value': '2025 (GenAI Era)'}
            ],
            value='2025 (GenAI Era)',
            className="mb-3"
        ),
        
        # View type selection (converts Streamlit selectbox)
        html.Label("Analysis View:", className="form-label"),
        dcc.Dropdown(
            id='view-type-selector',
            options=[
                {'label': 'Adoption Rates', 'value': 'Adoption Rates'},
                {'label': 'Historical Trends', 'value': 'Historical Trends'},
                {'label': 'Industry Analysis', 'value': 'Industry Analysis'},
                {'label': 'Investment Trends', 'value': 'Investment Trends'},
                {'label': 'Regional Growth', 'value': 'Regional Growth'},
                {'label': 'AI Cost Trends', 'value': 'AI Cost Trends'},
                {'label': 'Token Economics', 'value': 'Token Economics'},
                {'label': 'Financial Impact', 'value': 'Financial Impact'},
                {'label': 'Labor Impact', 'value': 'Labor Impact'},
                {'label': 'Firm Size Analysis', 'value': 'Firm Size Analysis'},
                {'label': 'Technology Stack', 'value': 'Technology Stack'},
                {'label': 'AI Technology Maturity', 'value': 'AI Technology Maturity'},
                {'label': 'Productivity Research', 'value': 'Productivity Research'},
                {'label': 'Environmental Impact', 'value': 'Environmental Impact'},
                {'label': 'Geographic Distribution', 'value': 'Geographic Distribution'},
                {'label': 'OECD 2025 Findings', 'value': 'OECD 2025 Findings'},
                {'label': 'Barriers & Support', 'value': 'Barriers & Support'},
                {'label': 'ROI Analysis', 'value': 'ROI Analysis'},
                {'label': 'Skill Gap Analysis', 'value': 'Skill Gap Analysis'},
                {'label': 'AI Governance', 'value': 'AI Governance'},
                {'label': 'Causal Analysis', 'value': 'Causal Analysis'},
                {'label': 'Bibliography & Sources', 'value': 'Bibliography & Sources'},
                {'label': 'AI Chart Generator', 'value': 'AI Chart Generator'}  # New Vizro-AI view
            ],
            value='Adoption Rates',
            className="mb-3"
        ),
        
        html.Hr(),
        
        # Advanced options section
        html.H6("🔧 Advanced Options"),
        
        # Year range slider for historical trends
        html.Div([
            html.Label("Year Range:", className="form-label"),
            dcc.RangeSlider(
                id='year-range-slider',
                min=2017,
                max=2025,
                value=[2017, 2025],
                marks={i: str(i) for i in range(2017, 2026)},
                step=1,
                className="mb-3"
            )
        ], id='year-range-container', style={'display': 'none'}),
        
        html.Hr(),
        
        # Export options
        html.H6("📥 Export Options"),
        dcc.Dropdown(
            id='export-format-selector',
            options=[
                {'label': 'CSV Data', 'value': 'CSV Data'},
                {'label': 'PNG Image', 'value': 'PNG Image'},
                {'label': 'PDF Report (Beta)', 'value': 'PDF Report (Beta)'}
            ],
            value='CSV Data',
            className="mb-3"
        ),
        
        dbc.Button("📥 Export Current View", 
                  id="export-btn", 
                  color="secondary", 
                  className="mb-3 w-100"),
        
        html.Hr(),
        
        # Feedback section
        html.H6("💬 Feedback"),
        dbc.Textarea(
            id="feedback-textarea",
            placeholder="Share your thoughts or request features...",
            style={"height": "100px"},
            className="mb-3"
        ),
        dbc.Button("Submit Feedback", 
                  id="feedback-btn", 
                  color="success", 
                  className="mb-3 w-100"),
        
        # Help section (converts Streamlit expander)
        dbc.Accordion([
            dbc.AccordionItem([
                html.Div([
                    html.Strong("Navigation Tips:"),
                    html.Ul([
                        html.Li("Use the Analysis View dropdown to explore different perspectives"),
                        html.Li("Click 📊 icons for data source information"),
                        html.Li("Hover over chart elements for details")
                    ]),
                    html.Strong("Keyboard Shortcuts:"),
                    html.Ul([
                        html.Li("Ctrl + K: Quick search"),
                        html.Li("F: Toggle fullscreen"),
                        html.Li("?: Show help")
                    ])
                ])
            ], title="❓ Need Help?")
        ], start_collapsed=True)
        
    ], className="sidebar-content")
    
    return sidebar
```

### **Day 3-4: Core Callbacks**

#### **Create callbacks/navigation_callbacks.py**
```python
# callbacks/navigation_callbacks.py - Handle navigation and state management
from dash import callback, Input, Output, State
import dash_bootstrap_components as dbc
from layouts.main_layout import create_key_metrics_cards

@callback(
    Output('key-metrics-row', 'children'),
    [Input('data-year-selector', 'value'),
     Input('data-store', 'data')]
)
def update_key_metrics(data_year, mckinsey_data):
    """Update key metrics cards based on selected year and loaded data"""
    if mckinsey_data is None:
        return html.Div("Loading metrics...", className="text-center")
    
    return create_key_metrics_cards(data_year, mckinsey_data)

@callback(
    Output('year-range-container', 'style'),
    Input('view-type-selector', 'value')
)
def toggle_year_range_visibility(view_type):
    """Show year range slider only for Historical Trends view"""
    if view_type == "Historical Trends":
        return {'display': 'block'}
    else:
        return {'display': 'none'}

@callback(
    Output('session-store', 'data'),
    [Input('persona-selector', 'value'),
     Input('data-year-selector', 'value'),
     Input('view-type-selector', 'value')],
    State('session-store', 'data')
)
def update_session_state(persona, data_year, view_type, current_session):
    """Update session state when user changes selections - converts Streamlit session state"""
    
    updated_session = current_session.copy() if current_session else {}
    updated_session.update({
        'selected_persona': persona,
        'data_year': data_year,
        'view_type': view_type,
        'first_visit': False
    })
    
    return updated_session

@callback(
    Output('launch-vizro-btn', 'children'),
    Input('launch-vizro-btn', 'n_clicks')
)
def handle_vizro_launch(n_clicks):
    """Handle Vizro dashboard launch - converts Streamlit button logic"""
    if n_clicks:
        # Integrate with existing Vizro dashboard code
        try:
            # Use existing vizro_dashboard function
            dashboards = vizro_dashboard.create_multi_persona_dashboard({})
            return "✅ Dashboard launched at localhost:8050"
        except Exception as e:
            return f"❌ Launch failed: {str(e)}"
    
    return "🚀 Launch Vizro Executive Dashboard"

@callback(
    Output('feedback-btn', 'children'),
    [Input('feedback-btn', 'n_clicks'),
     Input('feedback-textarea', 'value')]
)
def handle_feedback_submission(n_clicks, feedback_text):
    """Handle feedback submission - converts Streamlit feedback logic"""
    if n_clicks and feedback_text:
        # Process feedback (integrate with existing system if available)
        return "✅ Thank you for your feedback!"
    
    return "Submit Feedback"
```

### **Day 5-7: Main Content Views**

#### **Create callbacks/visualization_callbacks.py**
```python
# callbacks/visualization_callbacks.py - Handle main content visualization
from dash import callback, Input, Output, State, html, dcc
import dash_bootstrap_components as dbc
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd

# Import existing business logic (unchanged)
from business.metrics import business_metrics
from business.causal_analysis import causal_engine

@callback(
    Output('main-content-area', 'children'),
    [Input('view-type-selector', 'value'),
     Input('data-year-selector', 'value'),
     Input('persona-selector', 'value'),
     Input('year-range-slider', 'value'),
     Input('data-store', 'data')]
)
def update_main_content(view_type, data_year, persona, year_range, mckinsey_data):
    """Main content router - converts Streamlit view_type logic to Dash"""
    
    if mckinsey_data is None:
        return dbc.Spinner(html.Div("Loading dashboard data..."), color="primary")
    
    # Extract data from mckinsey_data (same structure as Streamlit version)
    dashboard_data = mckinsey_data
    
    # Route to appropriate view function
    if view_type == "Historical Trends":
        return create_historical_trends_view(dashboard_data, year_range, persona)
    elif view_type == "Industry Analysis":
        return create_industry_analysis_view(dashboard_data, data_year)
    elif view_type == "Financial Impact":
        return create_financial_impact_view(dashboard_data)
    elif view_type == "Investment Trends":
        return create_investment_trends_view(dashboard_data)
    elif view_type == "AI Chart Generator":
        return create_ai_chart_generator_view(dashboard_data)
    # Add all other view types following the same pattern...
    else:
        return create_default_view(view_type, dashboard_data)

def create_historical_trends_view(dashboard_data, year_range, persona):
    """Create Historical Trends view - converts Streamlit Historical Trends section"""
    
    # Get historical data (same as Streamlit version)
    historical_data = dashboard_data.get('historical_data', pd.DataFrame())
    
    if historical_data.empty:
        return dbc.Alert("Historical data not available", color="warning")
    
    # Filter data by year range
    filtered_data = historical_data[
        (historical_data['year'] >= year_range[0]) & 
        (historical_data['year'] <= year_range[1])
    ]
    
    # Create the same Plotly figure as in Streamlit
    fig = go.Figure()
    
    # Add overall AI use line (same as Streamlit)
    fig.add_trace(go.Scatter(
        x=filtered_data['year'], 
        y=filtered_data['ai_use'], 
        mode='lines+markers', 
        name='Overall AI Use', 
        line=dict(width=4, color='#1f77b4'),
        marker=dict(size=8),
        hovertemplate='Year: %{x}<br>Adoption: %{y}%<br>Source: AI Index & McKinsey<extra></extra>'
    ))
    
    # Add GenAI use line (same as Streamlit)
    fig.add_trace(go.Scatter(
        x=filtered_data['year'], 
        y=filtered_data['genai_use'], 
        mode='lines+markers', 
        name='GenAI Use', 
        line=dict(width=4, color='#ff7f0e'),
        marker=dict(size=8),
        hovertemplate='Year: %{x}<br>Adoption: %{y}%<br>Source: AI Index 2025<extra></extra>'
    ))
    
    # Add annotations (same as Streamlit)
    if 2022 in filtered_data['year'].values:
        fig.add_annotation(
            x=2022, y=33,
            text="<b>ChatGPT Launch</b><br>GenAI Era Begins<br><i>Source: Stanford AI Index</i>",
            showarrow=True,
            arrowhead=2,
            arrowsize=1,
            arrowwidth=2,
            arrowcolor="#ff7f0e",
            ax=-50,
            ay=-40,
            bgcolor="rgba(255,127,14,0.1)",
            bordercolor="#ff7f0e",
            borderwidth=2,
            font=dict(color="#ff7f0e", size=11, family="Arial")
        )
    
    fig.update_layout(
        title="AI Adoption Trends: The GenAI Revolution", 
        xaxis_title="Year", 
        yaxis_title="Adoption Rate (%)",
        height=500,
        hovermode='x unified'
    )
    
    # Create layout with chart and insights (converts Streamlit layout)
    content = dbc.Container([
        dbc.Row([
            dbc.Col([
                html.H3("📈 Historical Trends"),
                html.P("Track AI adoption from early implementation to the GenAI revolution")
            ])
        ]),
        
        dbc.Row([
            dbc.Col([
                dcc.Graph(figure=fig, id='historical-trends-chart')
            ], width=10),
            dbc.Col([
                dbc.Button("📊", id="hist-source-btn", color="info", size="sm",
                          style={"width": "40px", "height": "40px"})
            ], width=2)
        ]),
        
        dbc.Row([
            dbc.Col([
                dbc.Alert([
                    html.H5("📈 Evidence-Based Analysis: The 2021-2022 GenAI Explosion"),
                    html.P("Federal Research Infrastructure (NSF Sources):"),
                    html.Ul([
                        html.Li("2020: NSF launched 7 AI Research Institutes with initial $220M investment"),
                        html.Li("2021: Expanded to 18 institutes across 40 states, creating research infrastructure"),
                        html.Li("Impact: Provided sustained federal commitment to foundational AI research")
                    ]),
                    html.P("Market Evidence (Stanford AI Index):"),
                    html.Ul([
                        html.Li("Investment Surge: GenAI funding increased 9x from $2.8B (2022) to $25.2B (2023)"),
                        html.Li("Adoption Speed: ChatGPT reached 1M users in 5 days, fastest in history"),
                        html.Li("Enterprise Use: 78% of organizations reported AI use by 2024 (vs. 55% in 2023)")
                    ])
                ], color="info", className="mt-3")
            ])
        ])
    ])
    
    return content

def create_industry_analysis_view(dashboard_data, data_year):
    """Create Industry Analysis view - converts Streamlit Industry Analysis section"""
    
    # Get sector data (same as Streamlit version)
    sector_2025 = dashboard_data.get('sector_2025', pd.DataFrame())
    
    if sector_2025.empty:
        return dbc.Alert("Industry analysis data not available", color="warning")
    
    # Create grouped bar chart (same Plotly code as Streamlit)
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        name='Overall AI Adoption',
        x=sector_2025['sector'],
        y=sector_2025['adoption_rate'],
        marker_color='#3498DB',
        text=[f'{x}%' for x in sector_2025['adoption_rate']],
        textposition='outside'
    ))
    
    fig.add_trace(go.Bar(
        name='GenAI Adoption',
        x=sector_2025['sector'],
        y=sector_2025['genai_adoption'],
        marker_color='#E74C3C',
        text=[f'{x}%' for x in sector_2025['genai_adoption']],
        textposition='outside'
    ))
    
    # Add ROI as line chart
    fig.add_trace(go.Scatter(
        name='Average ROI',
        x=sector_2025['sector'],
        y=sector_2025['avg_roi'],
        mode='lines+markers',
        line=dict(width=3, color='#2ECC71'),
        marker=dict(size=10),
        yaxis='y2',
        text=[f'{x}x' for x in sector_2025['avg_roi']],
        textposition='top center'
    ))
    
    fig.update_layout(
        title="AI Adoption and ROI by Industry Sector",
        xaxis_title="Industry",
        yaxis=dict(title="Adoption Rate (%)", side="left"),
        yaxis2=dict(title="Average ROI (x)", side="right", overlaying="y"),
        barmode='group',
        height=500,
        hovermode='x unified',
        xaxis_tickangle=45
    )
    
    # Create layout (converts Streamlit layout)
    content = dbc.Container([
        dbc.Row([
            dbc.Col([
                html.H3("🏭 Industry Analysis"),
                html.P("AI adoption and ROI by industry sector (2025)")
            ])
        ]),
        
        dbc.Row([
            dbc.Col([
                dcc.Graph(figure=fig, id='industry-analysis-chart')
            ])
        ]),
        
        dbc.Row([
            dbc.Col([
                dbc.Card([
                    dbc.CardBody([
                        html.H5("Top Adopter"),
                        html.H3("Technology (92%)", className="text-primary"),
                        html.P("+7% vs Finance", className="text-success")
                    ])
                ])
            ], width=4),
            dbc.Col([
                dbc.Card([
                    dbc.CardBody([
                        html.H5("Highest ROI"),
                        html.H3("Technology (4.2x)", className="text-primary"),
                        html.P("Best returns", className="text-success")
                    ])
                ])
            ], width=4),
            dbc.Col([
                dbc.Card([
                    dbc.CardBody([
                        html.H5("Fastest Growing"),
                        html.H3("Healthcare", className="text-primary"),
                        html.P("+15pp YoY", className="text-success")
                    ])
                ])
            ], width=4)
        ], className="mt-3")
    ])
    
    return content

def create_ai_chart_generator_view(dashboard_data):
    """Create AI Chart Generator view - NEW Vizro-AI integration"""
    
    content = dbc.Container([
        dbc.Row([
            dbc.Col([
                html.H3("🤖 AI-Powered Chart Generation"),
                html.P("Generate custom visualizations using natural language")
            ])
        ]),
        
        dbc.Row([
            dbc.Col([
                dbc.Card([
                    dbc.CardBody([
                        html.H5("Available Datasets", className="card-title"),
                        html.Ul([
                            html.Li("Industry Analysis (sector_2025)"),
                            html.Li("Financial Impact (financial_impact)"),
                            html.Li("Historical Trends (historical_data)"),
                            html.Li("Geographic Data (geographic)"),
                            html.Li("Investment Data (ai_investment_data)")
                        ])
                    ])
                ])
            ], width=4),
            dbc.Col([
                dbc.Card([
                    dbc.CardBody([
                        html.H5("Chart Generation", className="card-title"),
                        dbc.Textarea(
                            id="ai-chart-prompt",
                            placeholder="Describe the chart you want to create...\n\nExample: 'Show me a bar chart of AI adoption rates by industry'",
                            style={"height": "120px"},
                            className="mb-3"
                        ),
                        dbc.Select(
                            id="chart-type-hint",
                            options=[
                                {"label": "Auto-detect", "value": ""},
                                {"label": "Bar Chart", "value": "bar"},
                                {"label": "Line Chart", "value": "line"},
                                {"label": "Scatter Plot", "value": "scatter"},
                                {"label": "Pie Chart", "value": "pie"},
                                {"label": "Heatmap", "value": "heatmap"}
                            ],
                            value="",
                            className="mb-3"
                        ),
                        dbc.Button("🎨 Generate Chart", 
                                  id="generate-chart-btn", 
                                  color="primary", 
                                  className="w-100")
                    ])
                ])
            ], width=8)
        ], className="mb-4"),
        
        dbc.Row([
            dbc.Col([
                html.Div(id="ai-generated-chart-container")
            ])
        ])
    ])
    
    return content

def create_default_view(view_type, dashboard_data):
    """Create default view for unimplemented view types"""
    
    content = dbc.Container([
        dbc.Alert([
            html.H4(f"🚧 {view_type} View"),
            html.P(f"The {view_type} view is being migrated from Streamlit to Dash."),
            html.P("This view will be available in the next migration phase."),
            html.Hr(),
            html.P("Available data keys:", className="mb-2"),
            html.Ul([html.Li(key) for key in dashboard_data.keys() if dashboard_data.get(key) is not None])
        ], color="info")
    ])
    
    return content

# AI Chart Generation callback (NEW Vizro-AI integration)
@callback(
    Output('ai-generated-chart-container', 'children'),
    [Input('generate-chart-btn', 'n_clicks')],
    [State('ai-chart-prompt', 'value'),
     State('chart-type-hint', 'value'),
     State('data-store', 'data')]
)
def generate_ai_chart(n_clicks, prompt, chart_type, dashboard_data):
    """Generate chart using AI - integrates Vizro-AI functionality"""
    
    if not n_clicks or not prompt:
        return html.Div()
    
    try:
        # This is where Vizro-AI integration would happen
        # For now, return a placeholder implementation
        
        # Example: Simple keyword-based chart generation
        if "industry" in prompt.lower() or "sector" in prompt.lower():
            sector_data = dashboard_data.get('sector_2025', pd.DataFrame())
            if not sector_data.empty:
                fig = px.bar(sector_data, x='sector', y='adoption_rate', 
                           title="AI Adoption by Industry (Generated by AI)")
                
                return dbc.Card([
                    dbc.CardHeader("✨ AI-Generated Chart"),
                    dbc.CardBody([
                        dcc.Graph(figure=fig),
                        dbc.Alert([
                            html.Strong("Interpretation: "),
                            "This chart shows AI adoption rates across different industry sectors. ",
                            "Technology leads with 92% adoption, followed by Financial Services at 85%."
                        ], color="success"),
                        dbc.Button("📋 Copy Code", color="secondary", size="sm", className="me-2"),
                        dbc.Button("💾 Save Chart", color="primary", size="sm")
                    ])
                ])
        
        # Placeholder for other chart types
        return dbc.Alert([
            html.H5("🤖 AI Chart Generation"),
            html.P(f"Received prompt: '{prompt}'"),
            html.P("Vizro-AI integration will be completed in Phase 2 of the migration."),
            html.P("For now, this is a placeholder showing the intended functionality.")
        ], color="info")
        
    except Exception as e:
        return dbc.Alert([
            html.H5("❌ Chart Generation Error"),
            html.P(f"Error: {str(e)}"),
            html.P("Please try a different prompt or check the data availability.")
        ], color="danger")
```

---

## 🔄 **Phase 2: Advanced Features (Week 2)**

### **LLM Instructions for Phase 2:**

#### **Migrate Geographic Analysis with Enhanced Maps**
```python
# Add to callbacks/visualization_callbacks.py

def create_geographic_distribution_view(dashboard_data):
    """
    INSTRUCTION FOR LLM: Convert the complex Geographic Distribution view from Streamlit
    
    REQUIREMENTS:
    1. Convert the 5-tab structure (Interactive Map, Research Infrastructure, etc.)
    2. Migrate the Plotly Choropleth map with state data
    3. Convert the enhanced_geographic DataFrame processing
    4. Maintain NSF AI Institutes visualization
    5. Keep all source attribution and methodology sections
    
    SOURCE CODE REFERENCE: Lines 2800-3200 in original app.py
    """
    
    enhanced_geographic = dashboard_data.get('geographic', pd.DataFrame())
    state_research_data = dashboard_data.get('state_data', pd.DataFrame())
    
    # Create tabs using dbc.Tabs (converts st.tabs)
    tabs = dbc.Tabs([
        dbc.Tab(label="🗺️ Interactive Map", tab_id="tab-map"),
        dbc.Tab(label="🏛️ Research Infrastructure", tab_id="tab-research"),
        dbc.Tab(label="📊 State Comparisons", tab_id="tab-states"),
        dbc.Tab(label="🎓 Academic Centers", tab_id="tab-academic"),
        dbc.Tab(label="💰 Investment Flows", tab_id="tab-investment")
    ], id="geo-tabs", active_tab="tab-map")
    
    content = dbc.Container([
        dbc.Row([
            dbc.Col([
                html.H3("🗺️ AI Adoption Geographic Distribution"),
                html.P("Enhanced analysis with research infrastructure and federal investment data")
            ])
        ]),
        tabs,
        html.Div(id="geo-tab-content")
    ])
    
    return content

@callback(
    Output('geo-tab-content', 'children'),
    Input('geo-tabs', 'active_tab'),
    State('data-store', 'data')
)
def render_geo_tab_content(active_tab, dashboard_data):
    """
    INSTRUCTION FOR LLM: Convert each geographic tab content from Streamlit
    
    REQUIREMENTS:
    1. Convert st.plotly_chart() to dcc.Graph()
    2. Convert st.columns() to dbc.Row([dbc.Col()])
    3. Convert st.metric() to dbc.Card() with metrics
    4. Convert st.info() to dbc.Alert()
    5. Maintain all data processing logic unchanged
    """
    
    if active_tab == "tab-map":
        # Convert the interactive map section (lines 2850-2950 in original)
        return create_interactive_map_content(dashboard_data)
    elif active_tab == "tab-research":
        # Convert research infrastructure section (lines 2950-3050 in original)
        return create_research_infrastructure_content(dashboard_data)
    # ... continue for all tabs
```

#### **Migrate Token Economics Analysis**
```python
# Add to callbacks/visualization_callbacks.py

def create_token_economics_view(dashboard_data):
    """
    INSTRUCTION FOR LLM: Convert the comprehensive Token Economics view
    
    REQUIREMENTS:
    1. Convert 5-tab structure: "What Are Tokens?", "Token Pricing", etc.
    2. Migrate all Plotly visualizations (donut charts, scatter plots, etc.)
    3. Convert the interactive ROI calculator
    4. Maintain educational content about tokens
    5. Keep the token optimization strategies matrix
    
    SOURCE CODE REFERENCE: Lines 1600-1800 in original app.py
    """
    
    token_economics = dashboard_data.get('token_economics', pd.DataFrame())
    token_usage_patterns = dashboard_data.get('token_usage_patterns', pd.DataFrame())
    
    # Convert st.tabs to dbc.Tabs
    tabs = dbc.Tabs([
        dbc.Tab(label="What Are Tokens?", tab_id="tab-tokens"),
        dbc.Tab(label="Token Pricing", tab_id="tab-pricing"),
        dbc.Tab(label="Usage Patterns", tab_id="tab-patterns"),
        dbc.Tab(label="Optimization", tab_id="tab-optimization"),
        dbc.Tab(label="Economic Impact", tab_id="tab-economics")
    ], id="token-tabs", active_tab="tab-tokens")
    
    content = dbc.Container([
        # Convert st.columns to dbc.Row with metrics cards
        dbc.Row([
            dbc.Col([
                dbc.Card([
                    dbc.CardBody([
                        html.H4("286x", className="text-primary"),
                        html.P("Cost Reduction"),
                        html.Small("Since Nov 2022")
                    ])
                ])
            ], width=3),
            # ... continue for all 4 metrics
        ], className="mb-4"),
        
        tabs,
        html.Div(id="token-tab-content")
    ])
    
    return content
```

### **Migration Checklist for LLM (Week 2):**

**Day 8-9: Advanced Visualizations**
- [ ] Convert Geographic Distribution (5 tabs, choropleth maps)
- [ ] Convert Token Economics (5 tabs, interactive calculator)
- [ ] Convert Investment Trends (4 tabs, multiple chart types)

**Day 10-11: Business Logic Integration**
- [ ] Convert ROI Analysis (4 tabs, interactive calculator)
- [ ] Convert Causal Analysis (McKinsey CausalNx integration)
- [ ] Convert Financial Impact analysis

**Day 12-14: Remaining Views**
- [ ] Convert all remaining 15+ view types
- [ ] Implement AI Chart Generator with Vizro-AI
- [ ] Add comprehensive export functionality

---

## 🔄 **Phase 3: AI Integration & Polish (Week 3)**

### **LLM Instructions for Vizro-AI Integration:**

```python
# Create new file: components/vizro_ai_integration.py

"""
INSTRUCTION FOR LLM: Implement Vizro-AI integration for natural language chart generation

REQUIREMENTS:
1. Install vizro-ai package: pip install vizro-ai
2. Create chart generator that works with existing dashboard_data structure
3. Support natural language prompts like "show adoption by industry"
4. Integrate with existing Plotly chart patterns
5. Maintain source attribution and export functionality
"""

import vizro_ai as vai
import pandas as pd
import plotly.graph_objects as go
from dash import callback, Input, Output, State, html, dcc
import dash_bootstrap_components as dbc

class DashVizroAIGenerator:
    """Vizro-AI integration for Dash dashboard"""
    
    def __init__(self):
        """Initialize Vizro-AI with dashboard configuration"""
        self.vizro_ai = vai.VizroAI()
        
        # Map dashboard data keys to user-friendly names
        self.dataset_mapping = {
            'sector_2025': 'Industry Analysis Data',
            'financial_impact': 'Financial Impact Data', 
            'historical_data': 'Historical Trends Data',
            'geographic': 'Geographic Distribution Data',
            'ai_investment_data': 'Investment Trends Data'
        }
    
    def generate_chart_from_prompt(self, prompt, dataset_key, dashboard_data):
        """
        Generate chart using natural language prompt
        
        INSTRUCTION FOR LLM: This function should:
        1. Take natural language prompt
        2. Select appropriate dataset from dashboard_data
        3. Use Vizro-AI to generate Plotly figure
        4. Return figure with explanation and code
        """
        
        try:
            # Get dataset
            dataset = dashboard_data.get(dataset_key, pd.DataFrame())
            if dataset.empty:
                return {
                    'success': False,
                    'error': f'Dataset {dataset_key} not available'
                }
            
            # Generate chart using Vizro-AI
            result = self.vizro_ai.plot(
                df=dataset,
                user_input=prompt
            )
            
            return {
                'success': True,
                'figure': result.figure,
                'code': result.code,
                'explanation': result.explanation
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

# Add this callback to callbacks/visualization_callbacks.py

@callback(
    Output('ai-generated-chart-container', 'children'),
    [Input('generate-chart-btn', 'n_clicks')],
    [State('ai-chart-prompt', 'value'),
     State('chart-dataset-selector', 'value'),
     State('data-store', 'data')]
)
def generate_ai_chart_advanced(n_clicks, prompt, dataset_key, dashboard_data):
    """
    INSTRUCTION FOR LLM: Advanced AI chart generation callback
    
    REQUIREMENTS:
    1. Use DashVizroAIGenerator class
    2. Handle errors gracefully with user-friendly messages
    3. Display generated chart with explanation
    4. Include copy code and save chart functionality
    5. Maintain styling consistent with rest of dashboard
    """
    
    if not n_clicks or not prompt:
        return html.Div()
    
    # Initialize AI generator
    ai_generator = DashVizroAIGenerator()
    
    # Generate chart
    result = ai_generator.generate_chart_from_prompt(
        prompt, dataset_key, dashboard_data
    )
    
    if result['success']:
        return dbc.Card([
            dbc.CardHeader([
                html.H5("✨ AI-Generated Chart", className="mb-0"),
                dbc.Badge("Powered by Vizro-AI", color="primary", className="ms-2")
            ]),
            dbc.CardBody([
                # Display chart
                dcc.Graph(figure=result['figure'], id='ai-generated-chart'),
                
                # Display explanation
                dbc.Alert([
                    html.Strong("📝 AI Explanation: "),
                    html.P(result['explanation'])
                ], color="info", className="mt-3"),
                
                # Display generated code
                dbc.Accordion([
                    dbc.AccordionItem([
                        html.Pre(html.Code(result['code'], className="language-python"))
                    ], title="🔍 View Generated Code")
                ], start_collapsed=True, className="mt-3"),
                
                # Action buttons
                dbc.ButtonGroup([
                    dbc.Button("📋 Copy Code", id="copy-code-btn", color="secondary"),
                    dbc.Button("💾 Save Chart", id="save-chart-btn", color="primary"),
                    dbc.Button("🔄 Regenerate", id="regenerate-btn", color="warning")
                ], className="mt-3")
            ])
        ])
    else:
        return dbc.Alert([
            html.H5("❌ Chart Generation Failed"),
            html.P(f"Error: {result['error']}"),
            html.P("Please try rephrasing your prompt or selecting a different dataset.")
        ], color="danger")
```

### **Final Polish Instructions for LLM:**

```python
# Create assets/custom.css for styling

"""
INSTRUCTION FOR LLM: Create custom CSS to match Streamlit dashboard styling

REQUIREMENTS:
1. Make sidebar match Streamlit appearance
2. Style metric cards to look like st.metric()
3. Add hover effects and professional appearance
4. Ensure responsive design for different screen sizes
"""

/* Custom styles for Dash AI Adoption Dashboard */

.sidebar {
    background-color: #f8f9fa;
    padding: 20px;
    border-right: 1px solid #dee2e6;
    height: 100vh;
    overflow-y: auto;
}

.sidebar-header {
    color: #495057;
    border-bottom: 2px solid #007bff;
    padding-bottom: 10px;
    margin-bottom: 20px;
}

.metric-card {
    border-left: 4px solid #007bff;
    transition: transform 0.2s ease-in-out;
}

.metric-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,123,255,0.3);
}

.insight-box {
    background-color: rgba(31, 119, 180, 0.1);
    border-left: 4px solid #1f77b4;
    padding: 1rem;
    margin: 1rem 0;
    border-radius: 0.25rem;
}

/* AI Chart Generator specific styles */
.ai-chart-container {
    border: 2px dashed #007bff;
    border-radius: 10px;
    padding: 20px;
    background-color: #f8f9ff;
}

/* Make tabs look more like Streamlit */
.nav-tabs .nav-link {
    color: #495057;
    border: none;
    border-bottom: 2px solid transparent;
}

.nav-tabs .nav-link.active {
    background-color: transparent;
    border-color: #007bff;
    border-bottom: 2px solid #007bff;
}
```

---

## 📋 **Complete Migration Checklist**

### **Week 1: Core Structure ✅**
- [ ] Project structure setup
- [ ] Main app.py with Dash configuration
- [ ] Layout conversion (main_layout.py, sidebar_layout.py)
- [ ] Navigation callbacks
- [ ] Data loading integration
- [ ] 3-5 core views converted

### **Week 2: Advanced Features ✅**
- [ ] All 20+ view types converted
- [ ] Geographic analysis with maps
- [ ] Token economics with calculator
- [ ] McKinsey tools integration
- [ ] Export functionality
- [ ] Source attribution system

### **Week 3: AI Integration & Polish ✅**
- [ ] Vizro-AI integration complete
- [ ] Custom CSS styling
- [ ] Performance optimization
- [ ] Error handling refinement
- [ ] Documentation updates
- [ ] Testing and deployment

---

## 🎯 **Success Metrics**

**Technical Metrics:**
- [ ] All Plotly charts render correctly
- [ ] McKinsey tools integration works
- [ ] Data pipeline unchanged
- [ ] Export functionality preserved
- [ ] Performance improved vs Streamlit

**User Experience Metrics:**
- [ ] Professional enterprise appearance
- [ ] Persona-based filtering works
- [ ] AI chart generation functional
- [ ] Mobile responsive design
- [ ] Source attribution maintained

**Migration Quality:**
- [ ] Zero data processing changes
- [ ] All 28 datasets accessible
- [ ] Bibliography section complete
- [ ] Academic source standards maintained
- [ ] Professional deployment ready

This migration plan provides systematic, LLM-friendly instructions to convert your sophisticated AI Adoption Dashboard from Streamlit to Plotly Dash while preserving all functionality and enhancing the user experience with enterprise-grade features.